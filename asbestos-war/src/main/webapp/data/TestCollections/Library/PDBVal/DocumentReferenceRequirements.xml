<TestScript xmlns="http://hl7.org/fhir">
    <modifierExtension url="urn:module">
        <extension url="urn:fixture-in">
            <valueString value="request"/>
        </extension>
        <extension url="urn:fixture-in">
            <valueString value="response"/>
        </extension>
    </modifierExtension>

    <id value="documentReferenceValidations"/>
    <name value="documentReferenceValidations"/>
    <description value="Evaluate PDB-request Bundle"/>

    <test>
    <description value="DocumentReference requirements."/>
    <action>
        <assert>
            <description value="DocumentReference: DocumentReference has single content element"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.resource.select(is(FHIR.DocumentReference).content).all(count() = 1)"/>
            <warningOnly value="false"/>
        </assert>
    </action>
    <action>
        <assert>
            <description value="DocumentReference: DocumentReference has content.attachment.url|MHDPDBDocRefHasAttachment"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).content.attachment.url.exists()"/>
            <warningOnly value="false"/>
        </assert>
    </action>
    <action>
        <assert>
            <description value="DocumentReference: DocumentReference.content.attachment has contentType"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.resource.all(is(FHIR.DocumentReference)) implies content.attachment.contentType.exists()"/>
            <warningOnly value="false"/>
        </assert>
    </action>
    <action>
        <assert>
            <description value="DocumentReference: DocumentReference.content.attachment.data is not allowed"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.resource.all(is(FHIR.DocumentReference)) implies content.attachment.data.exists().not()"/>
            <warningOnly value="false"/>
        </assert>
    </action>

    <action>
        <assert>
            <description value="DocumentReference: DocumentReference links to Binary through content.attachment.url|MHDPDBBinaryInBundle"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.select(resource as DocumentReference).content.attachment.url ~ Bundle.entry.where(resource is Binary).fullUrl"/>
            <warningOnly value="false"/>
        </assert>
    </action>
    <action>
        <assert>
            <description value="DocumentReference: DocumentReference content attachment contentType is equivalent to Binary contentType|MHDPDBAttachmentContentType"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.select(resource as DocumentReference).select(content.attachment.url.value + content.attachment.contentType.value) ~ Bundle.entry.where(resource is Binary).select(fullUrl.value + resource.contentType.value)"/>
            <warningOnly value="false"/>
        </assert>
    </action>

    <action>
        <assert>
            <description value="DocumentReference: sourcePatientInfo, if it exists, is a reference to a contained Patient Resource|MHDPDBSourcePatientInfoIsContained"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.select(resource as DocumentReference).select(context.exists() implies context.sourcePatientInfo.exists() implies context.sourcePatientInfo.reference in contained.where(is(Patient)).id).allTrue()"/>
            <warningOnly value="false"/>
        </assert>
    </action>
    <action>
        <assert>
            <description value="DocumentReference: author, if it exists, is a reference to a contained Practitioner, PractitionerRole, Organization, Device, Patient, RelatedPerson Resource"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.resource.((is(FHIR.DocumentReference) and author.exists()) implies (author.reference in contained.(Practitioner.id | PractitionerRole.id | Organization.id | Device.id | Patient.id | RelatedPerson.id)))"/>
            <warningOnly value="false"/>
        </assert>
    </action>
    <action>
        <assert>
            <description value="DocumentReference: authenticator, if it exists, is a reference to a contained Practitioner, PractitionerRole, Organization Resource"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.resource.((is(FHIR.DocumentReference) and author.exists()) implies (author.reference in contained.(Practitioner.id | PractitionerRole.id | Organization.id)))"/>
            <warningOnly value="false"/>
        </assert>
    </action>
    <action>
        <assert>
            <description value="DocumentReference: masterIdentifier is required"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).masterIdentifier.exists()"/>
            <warningOnly value="false"/>
        </assert>
    </action>
    <action>
        <assert>
            <description value="DocumentReference: status is one of current, superseded, entered-in-error"/>
            <compareToSourceId value="request"/>
            <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).status in ('current' | 'superseded' | 'entered-in-error')"/>
            <warningOnly value="false"/>
        </assert>
    </action>
 </test>
</TestScript>
