<TestScript xmlns="http://hl7.org/fhir">
    <modifierExtension url="urn:module">
        <extension url="urn:fixture-in">
            <valueString value="request"/>
        </extension>
        <extension url="urn:fixture-in">
            <valueString value="response"/>
        </extension>
    </modifierExtension>

    <id value="requestMessageMHDv4"/>
    <name value="requestMessageMHDv4"/>
    <description value="Evaluate PDB-request Bundle"/>

    <test>
        <name value="Request message"/>
        <description value="PDB Request."/>
        <action>
            <assert>
                <description value="PDB: Verb is POST|MHDPDBUsesPost"/>
                <requestMethod value="post"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: Request contains one List|MHDv4BundleResources"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where($this is List).count() = 1 and Bundle.entry.resource.where($this is List).code.coding.code='submissionset'"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: Request contains one or more DocumentReference|MHDPDBOnePlusDocumentReference"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where($this is DocumentReference).count() >= 1"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: Comprehensive or Minimal metadata identified in profile|MHDPDBMetadataType"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.meta.profile = 'http://profiles.ihe.net/ITI/MHD/StructureDefinition/IHE.MHD.Comprehensive.ProvideBundle' or Bundle.meta.profile='http://profiles.ihe.net/ITI/MHD/StructureDefinition/IHE.MHD.Minimal.ProvideBundle'"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: All DocumentReferences in Bundle are linked to (SubmissionSet type) List"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.where(resource is DocumentReference).fullUrl in Bundle.entry.resource.where($this is List and code.coding.code='submissionset').select(entry.item.reference)"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: List links to only DocumentReferences that are in Bundle"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where($this is List and code.coding.code='submissionset').select(entry.item.reference).supersetOf(Bundle.entry.where(resource is DocumentReference).fullUrl)"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: {DocumentReference, List}.subject.reference is absolute external reference or UUID.|MHDPDBPatientReference"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.all($this is DocumentReference or $this is List implies (subject.reference.startsWith('http') or subject.reference.startsWith('urn:uuid:')))"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: subject is required."/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where($this is DocumentReference or $this is List).all(subject.reference.exists())"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: subject must reference a Patient."/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where($this is DocumentReference or ($this is List and code.coding.code='submissionset')).subject.reference.select(contains('/Patient/')).allTrue()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: {DocumentReference, List}.subject.reference must reference same Patient"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where($this is DocumentReference or ($this is List and code.coding.code='submissionset')).select(subject.reference).distinct().count() = 1"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: if DocumentReference.identifier carries the entryUUID then it shall be labeled official"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where($this is DocumentReference).all((identifier.value.startsWith('urn:uuid:') implies use = 'official'))"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>

</TestScript>
