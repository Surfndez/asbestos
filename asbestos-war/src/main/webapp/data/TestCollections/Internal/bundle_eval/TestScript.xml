<TestScript xmlns="http://hl7.org/fhir">
    <modifierExtension url="urn:module">
        <extension url="urn:fixture-in">
            <valueString value="request"/>
        </extension>
        <extension url="urn:fixture-in">
            <valueString value="response"/>
        </extension>
    </modifierExtension>

    <id value="singleDoc"/>
    <name value="singleDoc"/>
    <description value="Evaluate PDB-request Bundle"/>
    <!--
      If this is a normal TestScript execution, these fixtures will be inserted by the TestEngine:
        request - the input resource
        response - the response resource (could be OperationOutcome)
        OR
        If this is a module call, the urn:fixture-in extension supplies the fixture.
    -->

    <variable>
        <name value="isComprehensive"/>
        <expression value="Bundle.meta.profile = 'http://ihe.net/fhir/StructureDefinition/IHE_MHD_Provide_Comprehensive_DocumentBundle'"/>
        <sourceId value="request"/>
    </variable>


    <test>
        <description value="PDB Validations - Request message."/>
        <action>
            <operation>
                <description value="PDB in the request bundle is analyzed using FHIRPath assertions."/>
                <modifierExtension url="https://github.com/usnistgov/asbestos/wiki/TestScript-Import">
                    <extension url="component">
                        <valueString value="RequestMessage.xml"/>
                    </extension>
                    <extension url="urn:fixture-in">
                        <valueString value="request"/>
                    </extension>
                    <extension url="urn:fixture-in">
                        <valueString value="response"/>
                    </extension>
                </modifierExtension>
            </operation>
        </action>
    </test>


    <test>
        <description value="PDB Validations - Bundle requirements."/>
        <action>
            <operation>
                <description value="PDB in the request bundle is analyzed using FHIRPath assertions."/>
                <modifierExtension url="https://github.com/usnistgov/asbestos/wiki/TestScript-Import">
                    <extension url="component">
                        <valueString value="BundleRequirements.xml"/>
                    </extension>
                    <extension url="urn:fixture-in">
                        <valueString value="request"/>
                    </extension>
                    <extension url="urn:fixture-in">
                        <valueString value="response"/>
                    </extension>
                </modifierExtension>
            </operation>
        </action>
    </test>

    <!-- DocumentReference requirements. -->

    <!-- DocumentManifest requirements. -->

    <!-- Comprehensive Metadata only -->

    <!-- Transaction response. -->


    <test>
        <description value="DocumentReference requirements."/>
        <action>
            <assert>
                <description value="DocumentReference: DocumentReference has single content element"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.select(is(FHIR.DocumentReference).content).all(count() = 1)"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: DocumentReference has content.attachment.url|MHDPDBDocRefHasAttachment"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).content.attachment.url.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: DocumentReference.content.attachment has contentType"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.all(is(FHIR.DocumentReference)) implies content.attachment.contentType.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: DocumentReference.content.attachment.data is not allowed"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.all(is(FHIR.DocumentReference)) implies content.attachment.data.exists().not()"/>
                <warningOnly value="false"/>
            </assert>
        </action>

        <action>
            <assert>
                <description value="DocumentReference: DocumentReference links to Binary through content.attachment.url|MHDPDBBinaryInBundle"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.select(resource as DocumentReference).content.attachment.url ~ Bundle.entry.where(resource is Binary).fullUrl"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: DocumentReference content attachment contentType is equivalent to Binary contentType|MHDPDBAttachmentContentType"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.select(resource as DocumentReference).select(content.attachment.url.value + content.attachment.contentType.value) ~ Bundle.entry.where(resource is Binary).select(fullUrl.value + resource.contentType.value)"/>
                <warningOnly value="false"/>
            </assert>
        </action>

        <action>
            <assert>
                <description value="DocumentReference: sourcePatientInfo, if it exists, is a reference to a contained Patient Resource|MHDPDBSourcePatientInfoIsContained"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="iif(Bundle.entry.resource.ofType(DocumentReference).context.sourcePatientInfo, Bundle.entry.resource.ofType(DocumentReference).context.sourcePatientInfo.reference = Bundle.entry.resource.ofType(DocumentReference).contained.Patient.id, true)"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: author, if it exists, is a reference to a contained Practitioner, PractitionerRole, Organization, Device, Patient, RelatedPerson Resource"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.((is(FHIR.DocumentReference) and author.exists()) implies (author.reference in contained.(Practitioner.id | PractitionerRole.id | Organization.id | Device.id | Patient.id | RelatedPerson.id)))"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: authenticator, if it exists, is a reference to a contained Practitioner, PractitionerRole, Organization Resource"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.((is(FHIR.DocumentReference) and author.exists()) implies (author.reference in contained.(Practitioner.id | PractitionerRole.id | Organization.id)))"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: masterIdentifier is required"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).masterIdentifier.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: status is one of current, superseded, entered-in-error"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).status in ('current' | 'superseded' | 'entered-in-error')"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>

    <test>
        <description value="DocumentManifest requirements."/>
        <action>
            <assert>
                <description value="DocumentManifest: masterIdentifier is required"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentManifest)).masterIdentifier.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>
    <test>
        <description value="Comprehensive Metadata only"/>
        <action>
            <modifierExtension url="https://github.com/usnistgov/asbestos/wiki/TestScript-Conditional"/>
            <assert>
                <description value="Is the transaction labeled Comprehensive Metadata?"/>
                <expression value="${isComprehensive}"/>
                <operator value="equals"/>
                <value value="true"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: securityLabel is required for Comprehensive Metadata"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).securityLabel.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>
    <test>
        <description value="Transaction response."/>
        <action>
            <assert>
                <description value="Transaction: returns 200|MHDPDBGoodStatus"/>
                <response value="okay"/>
                <sourceId value="response"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: returns Bundle|MHDPDBReturnsBundle"/>
                <resource value="Bundle"/>
                <sourceId value="response"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: Response is labeled as transaction-response|MHDPDBRequestIsTransaction"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.type = 'transaction-response'"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: All resources in Bundle return 201|MHDPDBEntryReturns201"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.status.value.startsWith('201'))"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: All resources in Bundle return location|MHDPDBReturnLocation"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.location.exists())"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: All resources in Bundle return etag (warning only)|MHDPDBReturnEtag"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.etag)"/>
                <warningOnly value="true"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: All resources in Bundle return lastModified (warning only)"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.lastModified.exists())"/>
                <warningOnly value="true"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: No resources in Bundle return OperationOutcome"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.outcome).not()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>
</TestScript>
