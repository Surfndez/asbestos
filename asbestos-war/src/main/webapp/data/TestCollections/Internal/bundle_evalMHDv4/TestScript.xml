<TestScript xmlns="http://hl7.org/fhir">
    <id value="singleDocMHDv4"/>
    <name value="singleDocMHDv4"/>
    <description value="Evaluate PDB-request Bundle"/>
    <!--
      These fixtures will be inserted by the TestEngine:
        request - the input resource
        response - the response resource (could be OperationOutcome)
    -->

    <variable>
        <name value="isComprehensive"/>
        <expression value="Bundle.meta.profile = 'http://profiles.ihe.net/ITI/MHD/StructureDefinition/IHE.MHD.Comprehensive.ProvideBundle'"/>
        <sourceId value="request"/>
    </variable>
    <test>
        <name value="Request message"/>
        <description value="PDB Request."/>
        <action>
            <assert>
                <description value="PDB: Verb is POST|MHDPDBUsesPost"/>
                <requestMethod value="post"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: Request contains one List|MHDv4BundleResources"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.List)).count() = 1 and Bundle.entry.resource.where(is(FHIR.List)).code.coding.code='submissionset'"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: Request contains one or more DocumentReference|MHDPDBOneDocumentManifest"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).count() >= 1"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: Comprehensive or Minimal metadata identified in profile|MHDPDBMetadataType"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.meta.profile = 'http://profiles.ihe.net/ITI/MHD/StructureDefinition/IHE.MHD.Comprehensive.ProvideBundle' or Bundle.meta.profile='http://profiles.ihe.net/ITI/MHD/StructureDefinition/IHE.MHD.Minimal.ProvideBundle'"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <!-- continue from here -->
        <action>
            <assert>
                <description value="PDB: All DocumentReferences in Bundle are linked to List"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.all(resource.is(FHIR.DocumentReference).fullUrl) in Bundle.entry.resource.where(is(FHIR.List).content.reference).exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: DocumentManifest links to only DocumentReferences that are in Bundle"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.all(is(FHIR.DocumentManifest) implies content.reference = Bundle.entry.where(resource.is(FHIR.DocumentReference)).fullUrl).exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: {DocumentReference, DocumentManifest, List}.subject.reference is absolute external reference or UUID.|MHDPDBPatientReference"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.all($this is(FHIR.DocumentReference) or $this is(FHIR.DocumentManifest) or $this is(FHIR.List)  implies ($this.subject.reference.startsWith('http') or $this.subject.reference.startsWith('urn:uuid:')   ))"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: subject is required."/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference) or is(FHIR.DocumentManifest) or is(FHIR.List)).all($this.subject.reference.exists())"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: subject must reference a Patient."/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference) or is(FHIR.DocumentManifest) or is(FHIR.List)).subject.reference.select(matches('.*Patient.*')).all(true) "/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: {DocumentReference, DocumentManifest, List}.subject.reference must reference same Patient"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference) or is(FHIR.DocumentManifest) or is(FHIR.List)).select(subject.reference).distinct().count() = 1"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="PDB: if DocumentReference.identifier carries the entryUUID then it shall be labeled official"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.select((resource as DocumentReference).identifier).all($this.value.startsWith('urn:uuid:') implies $this.use = 'official')"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>
    <test>
        <description value="Bundle requirements."/>
        <action>
            <assert>
                <description value="Transaction: Request is Bundle|MHDPDBRequestIsBundle"/>
                <sourceId value="request"/>
                <resource value="Bundle"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: Request is labeled as transaction|MHDPDBRequestIsTransaction"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.type = 'transaction'"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Bundle: bundle.entry.fullUrl starts with http, urn:uuid: or urn:oid:"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.fullUrl.startsWith('http') or Bundle.entry.fullUrl.startsWith('urn:uuid:') or Bundle.entry.fullUrl.startsWith('urn:oid:')"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Bundle: entry.fullUrl must be unique in Bundle|MHDPDBFullUrlUniqueInBundle"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.where(fullUrl.exists()).select(fullUrl&amp;resource.meta.versionId).isDistinct()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Bundle: entry.request must exist for each entry with method=POST and a url"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.all(request.exists() and request.method = 'POST' and request.url.exists())"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Bundle: Test entry.request.url. See http://hl7.org/fhir/bundle-definitions.html#Bundle.entry.request.url"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.all(request.url = resource.resourceType or request.url = fullUrl)"/>
                <warningOnly value="true"/>
            </assert>
        </action>
    </test>

    <test>
        <description value="DocumentReference requirements."/>
        <action>
            <assert>
                <description value="DocumentReference: DocumentReference has single content element"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.select(is(FHIR.DocumentReference).content).all(count() = 1)"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: DocumentReference has content.attachment.url|MHDPDBDocRefHasAttachment"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).content.attachment.url.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: DocumentReference.content.attachment has contentType"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.all(is(FHIR.DocumentReference)) implies content.attachment.contentType.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: DocumentReference.content.attachment.data is not allowed"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.all(is(FHIR.DocumentReference)) implies content.attachment.data.exists().not()"/>
                <warningOnly value="false"/>
            </assert>
        </action>

        <action>
            <assert>
                <description value="DocumentReference: DocumentReference links to Binary through content.attachment.url|MHDPDBBinaryInBundle"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.all(is(FHIR.DocumentReference) implies content.attachment.url = Bundle.entry.where(resource.is(FHIR.Binary)).fullUrl).exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: sourcePatientInfo, if it exists, is a reference to a contained Patient Resource|MHDPDBSourcePatientInfoIsContained"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="iif(Bundle.entry.resource.ofType(DocumentReference).context.sourcePatientInfo, Bundle.entry.resource.ofType(DocumentReference).context.sourcePatientInfo.reference = Bundle.entry.resource.ofType(DocumentReference).contained.Patient.id, true)"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: author, if it exists, is a reference to a contained Practitioner, PractitionerRole, Organization, Device, Patient, RelatedPerson Resource"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.((is(FHIR.DocumentReference) and author.exists()) implies (author.reference in contained.(Practitioner.id | PractitionerRole.id | Organization.id | Device.id | Patient.id | RelatedPerson.id)))"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: authenticator, if it exists, is a reference to a contained Practitioner, PractitionerRole, Organization Resource"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.((is(FHIR.DocumentReference) and author.exists()) implies (author.reference in contained.(Practitioner.id | PractitionerRole.id | Organization.id)))"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: masterIdentifier is required"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).masterIdentifier.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: status is one of current, superseded, entered-in-error"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).status in ('current' | 'superseded' | 'entered-in-error')"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>

    <test>
        <description value="DocumentManifest requirements."/>
        <action>
            <assert>
                <description value="DocumentManifest: masterIdentifier is required"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentManifest)).masterIdentifier.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>
    <test>
        <description value="Comprehensive Metadata only"/>
        <action>
            <modifierExtension url="https://github.com/usnistgov/asbestos/wiki/TestScript-Conditional"/>
            <assert>
                <description value="Is the transaction labeled Comprehensive Metadata?"/>
                <expression value="${isComprehensive}"/>
                <operator value="equals"/>
                <value value="true"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="DocumentReference: securityLabel is required for Comprehensive Metadata"/>
                <compareToSourceId value="request"/>
                <compareToSourceExpression value="Bundle.entry.resource.where(is(FHIR.DocumentReference)).securityLabel.exists()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>
    <test>
        <description value="Transaction response."/>
        <action>
            <assert>
                <description value="Transaction: returns 200|MHDPDBGoodStatus"/>
                <response value="okay"/>
                <sourceId value="response"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: returns Bundle|MHDPDBReturnsBundle"/>
                <resource value="Bundle"/>
                <sourceId value="response"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: Response is labeled as transaction-response|MHDPDBRequestIsTransaction"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.type = 'transaction-response'"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: All resources in Bundle return 201|MHDPDBEntryReturns201"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.status.value.startsWith('201'))"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: All resources in Bundle return location|MHDPDBReturnLocation"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.location.exists())"/>
                <warningOnly value="false"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: All resources in Bundle return etag (warning only)|MHDPDBReturnEtag"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.etag)"/>
                <warningOnly value="true"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: All resources in Bundle return lastModified (warning only)"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.lastModified.exists())"/>
                <warningOnly value="true"/>
            </assert>
        </action>
        <action>
            <assert>
                <description value="Transaction: No resources in Bundle return OperationOutcome"/>
                <compareToSourceId value="response"/>
                <compareToSourceExpression value="Bundle.entry.all(response.outcome).not()"/>
                <warningOnly value="false"/>
            </assert>
        </action>
    </test>
</TestScript>
