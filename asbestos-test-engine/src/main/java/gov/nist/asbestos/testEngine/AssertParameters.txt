
assert.direction

The direction to use for the assertion.

If the direction is specified as "response" (the default), then the processing of this assert is against the received response message. If the direction is specified as "request", then the processing of this assert is against the sent request message.

assert.compareToSourceId

Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.

assert.compareToSourceExpression

The FHIRPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.

Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.

assert.compareToSourcePath

XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.

The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.

assert.contentType

The mime-type contents to compare against the request or response message 'Content-Type' header.

If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value. 

If "assert.sourceId" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers). 

If you'd like to have more control over the string, then use 'assert.headerField' instead.

assert.expression

The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.

If both "expression" and a "fixtureId" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId. 

If "expression" is specified and a "fixtureId" is not, then the expression will be evaluated against the response body of the last operation. Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.

assert.headerField

The HTTP header field name e.g. 'Location'.

If "headerField" is specified then "value" must be specified. If "sourceId" is not specified, then "headerField" will be evaluated against the last operation's response headers. Test engines are to keep track of the last operation's response body and response headers.

assert.minimumId

The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId.

Asserts that the response contains all the element/content in another fixture pointed to by minimumId. This can be a statically defined fixture or one that is dynamically set via responseId.

assert.operator

The operator type defines the conditional behavior of the assert. If not defined, the default is equals.

Operators are useful especially for negative testing. If operator is not specified, then the "equals" operator is assumed; e.g. 
<code> 
  <assert> 
    <operator value="in" /> 
    <responseCode value="200,201,204" /> 
  </assert> 
  <assert> 
    <operator value="notEquals" /> 
    <response value="okay"/> 
  </assert> 
  <assert> 
    <operator value="greaterThan" /> 
    <responseHeader> 
      <field value="Content-Length" /> 
      <value value="0" /> 
    </responseHeader/> 
  </assert> 
</code>.

assert.path

The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.

If both "path" and a "fixtureId" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId. 

If "path" is specified and a "fixtureId" is not, then the path will be evaluated against the response body of the last operation. 

Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.

assert.requestMethod

The request method or HTTP operation code to compare against that used by the client system under test.

If "requestMethod" is specified then it will be used in place of "value". The "requestMethod" will evaluate against the last operation's request HTTP operation.

assert.requestURL

The value to use in a comparison against the request URL path string.

If "requestURL" is specified then it will be used in place of "value". The "requestURL" will evaluate against the last operation's full request URL path string.

assert.resource

The type of the resource. See http://build.fhir.org/resourcelist.html.

This will be expected resource type in response body e.g. in read, vread, search, etc. See http://build.fhir.org/resourcelist.html for complete list of resource types; e.g. <assert > <resourceType value="Patient" </assert>.

assert.sourceId

Fixture to evaluate the XPath/JSONPath expression or the headerField against.

This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.

assert.value

The value to compare to.

The string-representation of a number, string, or boolean that is expected. Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.


