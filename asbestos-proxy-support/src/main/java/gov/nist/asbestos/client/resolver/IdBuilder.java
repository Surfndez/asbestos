package gov.nist.asbestos.client.resolver;

import gov.nist.asbestos.simapi.tk.installation.Installation;
import org.hl7.fhir.r4.model.Identifier;
import org.hl7.fhir.r4.model.ListResource;

import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Date;
import java.util.Enumeration;
import java.util.Objects;
import java.util.Optional;

/**
 * ITI Suppl Appx Z
 * Z.9.1 Identifier Type
 * The HL7 FHIR standard uses the data type Identifier to express a business identifier that uniquely identifies a thing or object (see FHIR http://hl7.org/fhir/R4/datatypes.html#identifier) including document uniqueIds, medical record numbers or patient identifiers.
 *
 * Ids generated by this class are only for testing purposes.
 */
public class IdBuilder {
    private boolean override = false;
    public static String SS_OPAQUE_ID = "3bdd";
    public static String FOLDER_OPAQUE_ID = "94c2";

    public IdBuilder(boolean override) {
        this.override = override;
    }

    /**
     * http://hl7.org/fhir/bundle.html#bundle-unique
     * Where a resource is not assigned a persistent identity that can be used in the Bundle, a UUID should be used (urn:uuid:...).
     * @param opaqueIdPrefix
     * @param logicalId
     * @return
     */
    public static String makeOpaqueLogicalId(String opaqueIdPrefix, String logicalId) {
        // Make logical ID opaque using the last parts of submission set classification node urn
        return String.format("%s.%s", opaqueIdPrefix, logicalId);
    }

    public static boolean isOpaqueLogicalId(String opaqueIdPrefix, String uid) {
        return uid.startsWith(opaqueIdPrefix);
    }

    public static String stripPrefix(String ssOpaqueIdPrefix, String uid) {
        return uid.replaceFirst(String.format("%s\\.",ssOpaqueIdPrefix), "");
    }


    public String allocate(String defaultValue) {
        if (!override)
            return defaultValue;
        return  "urn:oid:" + Installation.dateAsIdentifier(new Date(), "1.2." + ip() + ".", ".", false);
    }

    private String ip() {
        Enumeration e = null;
        String ip = "127.0.0.1";
        try {
            e = NetworkInterface.getNetworkInterfaces();
        } catch (SocketException ex) {
            throw new Error(ex);
        }
        while(e.hasMoreElements())
        {
            NetworkInterface n = (NetworkInterface) e.nextElement();
            Enumeration ee = n.getInetAddresses();
            while (ee.hasMoreElements())
            {
                InetAddress i = (InetAddress) ee.nextElement();
                /*
                Ipv6 format contains colon characters which is not usable in composing an OID.
                Select the Ipv4 interface because it blends in with an OID format.
                 */
                if (i instanceof Inet4Address) {
                    String x = i.getHostAddress();
                    if (! x.equals("127.0.0.1") && ! containsAlpha(x))
                        ip = x;
                }
            }
        }
        return ip;
    }

    private static boolean containsAlpha(String s) {
        for (int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            if (isAlpha(c))
                return true;
        }
        return false;
    }

    private static boolean isAlpha(char c) {
        int type = Character.getType(c);
        return type == Character.LOWERCASE_LETTER || type == Character.UPPERCASE_LETTER;
    }

    public static Optional<Identifier> getUsualTypeIdentifier(ListResource listResource) {
        Objects.requireNonNull(listResource);
        return listResource.getIdentifier().stream()
                .filter(e -> e.hasUse()
                        && Identifier.IdentifierUse.USUAL.equals(e.getUse())
                        && "urn:ietf:rfc:3986".equals(e.getSystem()))
                .findFirst();
    }



}
